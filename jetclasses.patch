commit e9d7f4fcb3a843c10a0dbed8c2bfe6685c451f7c
Author: Pieter David <pieter.david@cern.ch>
Date:   Wed Mar 6 09:55:14 2019 +0100

    Adjust includes and remove some CMSSW dependencies

diff --git a/ext/include/FactorizedJetCorrector.h b/ext/include/FactorizedJetCorrector.h
index f3a8d00..50a9c33 100644
--- a/ext/include/FactorizedJetCorrector.h
+++ b/ext/include/FactorizedJetCorrector.h
@@ -6,12 +6,10 @@
 #ifndef FACTORIZED_JET_CORRECTOR_H
 #define FACTORIZED_JET_CORRECTOR_H
 
-#include "CondFormats/Serialization/interface/Serializable.h"
-
 #include <vector>
 #include <string>
 #include "TLorentzVector.h"
-#include "CondFormats/JetMETObjects/interface/FactorizedJetCorrectorCalculator.h"
+#include "FactorizedJetCorrectorCalculator.h"
 
 class SimpleJetCorrector;
 class JetCorrectorParameters;
diff --git a/ext/include/JetCorrectionUncertainty.h b/ext/include/JetCorrectionUncertainty.h
index a2e3c4e..6df5f1f 100644
--- a/ext/include/JetCorrectionUncertainty.h
+++ b/ext/include/JetCorrectionUncertainty.h
@@ -1,8 +1,6 @@
 #ifndef JetCorrectionUncertainty_h
 #define JetCorrectionUncertainty_h
 
-#include "CondFormats/Serialization/interface/Serializable.h"
-
 #include <string>
 #include <vector>
 class SimpleJetCorrectionUncertainty;
diff --git a/ext/include/JetCorrectorParameters.h b/ext/include/JetCorrectorParameters.h
index 35a0194..f2d6914 100644
--- a/ext/include/JetCorrectorParameters.h
+++ b/ext/include/JetCorrectorParameters.h
@@ -7,8 +7,7 @@
 #ifndef JetCorrectorParameters_h
 #define JetCorrectorParameters_h
 
-#include "CondFormats/Serialization/interface/Serializable.h"
-#include "CondFormats/JetMETObjects/interface/Utilities.h"
+#include "Utilities.h"
 
 #include <string>
 #include <vector>
@@ -17,8 +16,6 @@
 #include <functional>
 #include <iostream>
 #include <memory>
-#include "FWCore/Utilities/interface/Exception.h"
-#include "FWCore/MessageLogger/interface/MessageLogger.h"
 
 class JetCorrectorParametersHelper;
 
@@ -53,8 +50,6 @@ class JetCorrectorParameters
         std::string              mFormula;
         std::vector<std::string> mParVar;
         std::vector<std::string> mBinVar;
-    
-      COND_SERIALIZABLE;
     };
     //---------------- Record class --------------------------------
     //-- Each Record holds the properties of a bin ----------------- 
@@ -87,10 +82,8 @@ class JetCorrectorParameters
         std::vector<float> mMin;
         std::vector<float> mMax;
         std::vector<float> mParameters;
-    
-      COND_SERIALIZABLE;
     };
-     
+
     //-------- Constructors --------------
     JetCorrectorParameters() { valid_ = false;}
     JetCorrectorParameters(const std::string& fFile, const std::string& fSection = "");
@@ -111,7 +104,7 @@ class JetCorrectorParameters
     bool isValid() const { return valid_; }
     void init();
 
-    static const int                                                           MAX_SIZE_DIMENSIONALITY = 3 COND_TRANSIENT;
+    static const int                                                           MAX_SIZE_DIMENSIONALITY = 3;
 
   private:
     //-------- Member variables ----------
@@ -119,9 +112,7 @@ class JetCorrectorParameters
     std::vector<JetCorrectorParameters::Record>                                mRecords;
     bool                                                                       valid_; /// is this a valid set?
 
-    std::shared_ptr<JetCorrectorParametersHelper>                              helper                      COND_TRANSIENT; 
-
-  COND_SERIALIZABLE;
+    std::shared_ptr<JetCorrectorParametersHelper>                              helper;
 };
 std::ostream& operator<<(std::ostream& out, const JetCorrectorParameters::Record& fBin);
 
@@ -240,8 +231,6 @@ class JetCorrectorParametersCollection {
 
   friend struct                          JetCorrectorParametersInitializeTransients;
 
- COND_SERIALIZABLE;
-
 };
 
 struct JetCorrectorParametersInitializeTransients {
diff --git a/ext/include/JetCorrectorParametersHelper.h b/ext/include/JetCorrectorParametersHelper.h
index 9688d7d..aa7c2bd 100644
--- a/ext/include/JetCorrectorParametersHelper.h
+++ b/ext/include/JetCorrectorParametersHelper.h
@@ -7,8 +7,8 @@
 #ifndef JetCorrectorParametersHelper_h
 #define JetCorrectorParametersHelper_h
 
-#include "CondFormats/JetMETObjects/interface/JetCorrectorParameters.h"
-#include "CondFormats/JetMETObjects/interface/Utilities.h"
+#include "JetCorrectorParameters.h"
+#include "Utilities.h"
 
 #include <string>
 #include <vector>
@@ -16,8 +16,7 @@
 #include <algorithm>
 #include <functional>
 #include <iostream>
-#include "FWCore/Utilities/interface/Exception.h"
-#include "FWCore/MessageLogger/interface/MessageLogger.h"
+#include <unordered_map>
 
 
 //---------- JetCorrectorParametersHelper class ----------------
@@ -49,4 +47,4 @@ class JetCorrectorParametersHelper
     unsigned                                                      SIZE;
 };
 
-#endif
\ No newline at end of file
+#endif
diff --git a/ext/include/JetResolution.h b/ext/include/JetResolution.h
index 6474895..68c1f67 100644
--- a/ext/include/JetResolution.h
+++ b/ext/include/JetResolution.h
@@ -1,18 +1,7 @@
 #ifndef JetResolution_h
 #define JetResolution_h
 
-// If you want to use the JER code in standalone mode, you'll need to create a new define named 'STANDALONE'. If you use gcc for compiling, you'll need to add
-// -DSTANDALONE to the command line
-// In standalone mode, no reference to CMSSW exists, so the only way to retrieve resolutions and scale factors are from text files.
-
-#include <CondFormats/JetMETObjects/interface/JetResolutionObject.h>
-
-#ifndef STANDALONE
-namespace edm {
-    class EventSetup;
-}
-#endif
-
+#include "JetResolutionObject.h"
 
 namespace JME {
     class JetResolution {
@@ -23,10 +12,6 @@ namespace JME {
                 // Empty
             }
 
-#ifndef STANDALONE
-            static const JetResolution get(const edm::EventSetup&, const std::string&);
-#endif
-
             float getResolution(const JetParameters& parameters) const;
 
             void dump() const {
@@ -50,10 +35,6 @@ namespace JME {
                 // Empty
             }
 
-#ifndef STANDALONE
-            static const JetResolutionScaleFactor get(const edm::EventSetup&, const std::string&);
-#endif
-
             float getScaleFactor(const JetParameters& parameters, Variation variation = Variation::NOMINAL) const;
 
             void dump() const {
diff --git a/ext/include/JetResolutionObject.h b/ext/include/JetResolutionObject.h
index c898047..6436c7d 100644
--- a/ext/include/JetResolutionObject.h
+++ b/ext/include/JetResolutionObject.h
@@ -1,18 +1,6 @@
 #ifndef JetResolutionObject_h
 #define JetResolutionObject_h
 
-// If you want to use the JER code in standalone mode, you'll need to create a new define named 'STANDALONE'. If you use gcc for compiling, you'll need to add
-// -DSTANDALONE to the command line
-// In standalone mode, no reference to CMSSW exists, so the only way to retrieve resolutions and scale factors are from text files.
-
-#ifndef STANDALONE
-#include "CondFormats/Serialization/interface/Serializable.h"
-#else
-// Create no-op definitions of CMSSW macro
-#define COND_SERIALIZABLE
-#define COND_TRANSIENT
-#endif
-
 #include <unordered_map>
 #include <vector>
 #include <string>
@@ -20,11 +8,7 @@
 #include <memory>
 #include <initializer_list>
 
-#ifndef STANDALONE
-#include "CommonTools/Utils/interface/FormulaEvaluator.h"
-#else
-#include <TFormula.h>
-#endif
+#include "FormulaEvaluator.h"
 
 enum class Variation {
     NOMINAL = 0,
@@ -141,8 +125,6 @@ namespace JME {
                 bool is_inside(float value) const {
                     return (value >= min) && (value <= max);
                 }
-
-                COND_SERIALIZABLE;
             };
 
             class Definition {
@@ -190,15 +172,10 @@ namespace JME {
                         return m_formula_str;
                     }
 
-#ifndef STANDALONE
                     const reco::FormulaEvaluator* getFormula() const {
                         return m_formula.get();
                     }
-#else
-                    TFormula const * getFormula() const {
-                        return m_formula.get();
-                    }
-#endif
+
                     void init();
 
                 private:
@@ -206,15 +183,10 @@ namespace JME {
                     std::vector<std::string> m_variables_name;
                     std::string m_formula_str;
 
-#ifndef STANDALONE
-                    std::shared_ptr<reco::FormulaEvaluator> m_formula COND_TRANSIENT;
-#else
-                    std::shared_ptr<TFormula> m_formula COND_TRANSIENT;
-#endif
-                    std::vector<Binning> m_bins COND_TRANSIENT;
-                    std::vector<Binning> m_variables COND_TRANSIENT;
+                    std::shared_ptr<reco::FormulaEvaluator> m_formula;
 
-                    COND_SERIALIZABLE;
+                    std::vector<Binning> m_bins;
+                    std::vector<Binning> m_variables;
             };
 
             class Record {
@@ -249,8 +221,6 @@ namespace JME {
                     std::vector<Range> m_bins_range;
                     std::vector<Range> m_variables_range;
                     std::vector<float> m_parameters_values;
-
-                    COND_SERIALIZABLE;
             };
 
         public:
@@ -277,8 +247,6 @@ namespace JME {
             std::vector<Record> m_records;
 
             bool m_valid = false;
-
-            COND_SERIALIZABLE;
     };
 };
 
diff --git a/ext/include/SimpleJetCorrectionUncertainty.h b/ext/include/SimpleJetCorrectionUncertainty.h
index d51fb4a..b81ca97 100644
--- a/ext/include/SimpleJetCorrectionUncertainty.h
+++ b/ext/include/SimpleJetCorrectionUncertainty.h
@@ -1,8 +1,6 @@
 #ifndef SimpleJetCorrectionUncertainty_h
 #define SimpleJetCorrectionUncertainty_h
 
-#include "CondFormats/Serialization/interface/Serializable.h"
-
 #include <string>
 #include <vector>
 class JetCorrectorParameters;
diff --git a/ext/include/SimpleJetCorrector.h b/ext/include/SimpleJetCorrector.h
index 53e8b13..266c960 100644
--- a/ext/include/SimpleJetCorrector.h
+++ b/ext/include/SimpleJetCorrector.h
@@ -1,14 +1,12 @@
 #ifndef SimpleJetCorrector_h
 #define SimpleJetCorrector_h
 
-#include "CondFormats/Serialization/interface/Serializable.h"
-
 #include <string>
 #include <vector>
 
-#include "CondFormats/JetMETObjects/interface/JetCorrectorParameters.h"
+#include "JetCorrectorParameters.h"
 
-#include "CommonTools/Utils/interface/FormulaEvaluator.h"
+#include "FormulaEvaluator.h"
 
 class JetCorrectorParameters;
 
diff --git a/ext/include/Utilities.h b/ext/include/Utilities.h
index e74a986..ad1a768 100644
--- a/ext/include/Utilities.h
+++ b/ext/include/Utilities.h
@@ -1,12 +1,6 @@
 #ifndef CondFormats_JetMETObjects_Utilities_h
 #define CondFormats_JetMETObjects_Utilities_h
 
-#ifdef STANDALONE
-#include <stdexcept>
-#else
-#include "FWCore/MessageLogger/interface/MessageLogger.h"
-#endif
-
 #include <cstdlib>
 #include <sstream>
 #include <string>
@@ -129,13 +123,9 @@ namespace
 {
   void handleError(const std::string& fClass, const std::string& fMessage)
   {
-#ifdef STANDALONE
     std::stringstream sserr;
     sserr<<fClass<<" ERROR: "<<fMessage;
     throw std::runtime_error(sserr.str());
-#else
-    edm::LogError(fClass) << fMessage;
-#endif
   }
   //----------------------------------------------------------------------
   inline float getFloat(const std::string& token)
diff --git a/ext/src/FactorizedJetCorrector.cc b/ext/src/FactorizedJetCorrector.cc
index 6c637cb..f3b2147 100644
--- a/ext/src/FactorizedJetCorrector.cc
+++ b/ext/src/FactorizedJetCorrector.cc
@@ -3,10 +3,10 @@
 // Author: Konstantinos Kousouris, Philipp Schieferdecker
 // Email:  kkousour@fnal.gov, philipp.schieferdecker@cern.ch
 
-#include "CondFormats/JetMETObjects/interface/FactorizedJetCorrector.h"
-#include "CondFormats/JetMETObjects/interface/SimpleJetCorrector.h"
-#include "CondFormats/JetMETObjects/interface/JetCorrectorParameters.h"
-#include "CondFormats/JetMETObjects/interface/Utilities.h"
+#include "FactorizedJetCorrector.h"
+#include "SimpleJetCorrector.h"
+#include "JetCorrectorParameters.h"
+#include "Utilities.h"
 #include "Math/PtEtaPhiE4D.h"
 #include "Math/Vector3D.h"
 #include "Math/LorentzVector.h"
diff --git a/ext/src/FactorizedJetCorrectorCalculator.cc b/ext/src/FactorizedJetCorrectorCalculator.cc
index 99dac89..b4457b2 100644
--- a/ext/src/FactorizedJetCorrectorCalculator.cc
+++ b/ext/src/FactorizedJetCorrectorCalculator.cc
@@ -3,10 +3,10 @@
 // Author: Konstantinos Kousouris, Philipp Schieferdecker
 // Email:  kkousour@fnal.gov, philipp.schieferdecker@cern.ch
 
-#include "CondFormats/JetMETObjects/interface/FactorizedJetCorrectorCalculator.h"
-#include "CondFormats/JetMETObjects/interface/SimpleJetCorrector.h"
-#include "CondFormats/JetMETObjects/interface/JetCorrectorParameters.h"
-#include "CondFormats/JetMETObjects/interface/Utilities.h"
+#include "FactorizedJetCorrectorCalculator.h"
+#include "SimpleJetCorrector.h"
+#include "JetCorrectorParameters.h"
+#include "Utilities.h"
 #include "Math/PtEtaPhiE4D.h"
 #include "Math/Vector3D.h"
 #include "Math/LorentzVector.h"
diff --git a/ext/src/FormulaEvaluator.cc b/ext/src/FormulaEvaluator.cc
index f964455..a41a060 100644
--- a/ext/src/FormulaEvaluator.cc
+++ b/ext/src/FormulaEvaluator.cc
@@ -15,6 +15,7 @@
 #include <functional>
 #include <cstdlib>
 #include <cmath>
+#include <stdexcept>
 #include "TMath.h"
 
 //#define DEBUG_AST
@@ -22,7 +22,7 @@
 #include <iostream>
 #endif
 // user include files
-#include "CommonTools/Utils/interface/FormulaEvaluator.h"
+#include "FormulaEvaluator.h"
 #include "formulaEvaluatorBase.h"
 #include "formulaUnaryMinusEvaluator.h"
 #include "formulaBinaryOperatorEvaluator.h"
@@ -31,7 +31,6 @@
 #include "formulaParameterEvaluator.h"
 #include "formulaFunctionOneArgEvaluator.h"
 #include "formulaFunctionTwoArgsEvaluator.h"
-#include "FWCore/Utilities/interface/Exception.h"
 
 using namespace reco;
 
@@ -770,7 +769,7 @@ FormulaEvaluator::FormulaEvaluator( std::string const& iFormula )
         }
       }
     }
-    throw cms::Exception("FormulaEvaluatorParseError")<<"While parsing '"<<iFormula<<"' could not parse beyond '"<<std::string(iFormula.begin(),iFormula.begin()+lastIndex) <<"'";
+    throw std::runtime_error("FormulaEvaluatorParseError: While parsing '"+iFormula+"' could not parse beyond '"+std::string(iFormula.begin(),iFormula.begin()+lastIndex)+"'");;
   }
 
   DEBUG_STATE("DONE parsing");
@@ -792,11 +791,11 @@ FormulaEvaluator::evaluate(double const* iVariables, double const* iParameters)
 
 void 
 FormulaEvaluator::throwWrongNumberOfVariables(size_t iSize) const {
-  throw cms::Exception("WrongNumVariables")<<"FormulaEvaluator expected at least "<<m_nVariables<<" but was passed only "<<iSize;
+  throw std::runtime_error("WrongNumVariables: FormulaEvaluator expected at least "+std::to_string(m_nVariables)+" but was passed only "+std::to_string(iSize));
 }
 void 
 FormulaEvaluator::throwWrongNumberOfParameters(size_t iSize) const {
-  throw cms::Exception("WrongNumParameters")<<"FormulaEvaluator expected at least "<<m_nParameters<<" but was passed only "<<iSize;
+  throw std::runtime_error("WrongNumParameters: FormulaEvaluator expected at least "+std::to_string(m_nParameters)+" but was passed only "+std::to_string(iSize));
 }
 
 std::vector<std::string> 
diff --git a/ext/src/JetCorrectionUncertainty.cc b/ext/src/JetCorrectionUncertainty.cc
index 6d7a4ed..f480639 100644
--- a/ext/src/JetCorrectionUncertainty.cc
+++ b/ext/src/JetCorrectionUncertainty.cc
@@ -1,7 +1,6 @@
-#include "CondFormats/JetMETObjects/interface/JetCorrectionUncertainty.h"
-#include "CondFormats/JetMETObjects/interface/SimpleJetCorrectionUncertainty.h"
-#include "CondFormats/JetMETObjects/interface/JetCorrectorParameters.h"
-#include "FWCore/MessageLogger/interface/MessageLogger.h"
+#include "JetCorrectionUncertainty.h"
+#include "SimpleJetCorrectionUncertainty.h"
+#include "JetCorrectorParameters.h"
 #include "Math/PtEtaPhiE4D.h"
 #include "Math/Vector3D.h"
 #include "Math/LorentzVector.h"
@@ -115,7 +114,7 @@ std::vector<float> JetCorrectionUncertainty::fillVector(const std::vector<std::s
       if (fNames[i] == "JetEta")
         {
           if (!mIsJetEtaset) {
-	    edm::LogError("JetCorrectionUncertainty::")<<" jet eta is not set";
+            std::cout << "JetCorrectionUncertainty:: jet eta is not set" << std::endl;
 	    result.push_back(-999.0);
 	  } else {
 	    result.push_back(mJetEta);
@@ -124,7 +123,7 @@ std::vector<float> JetCorrectionUncertainty::fillVector(const std::vector<std::s
       else if (fNames[i] == "JetPt")
         {
           if (!mIsJetPtset){
-	    edm::LogError("JetCorrectionUncertainty::")<<" jet pt is not set";  
+            std::cout << "JetCorrectionUncertainty:: jet pt is not set" << std::endl;
 	    result.push_back(-999.0);
 	  } else {
 	    result.push_back(mJetPt);
@@ -133,7 +132,7 @@ std::vector<float> JetCorrectionUncertainty::fillVector(const std::vector<std::s
       else if (fNames[i] == "JetPhi")
         {
           if (!mIsJetPhiset) {
-	    edm::LogError("JetCorrectionUncertainty::")<<" jet phi is not set";  
+            std::cout << "JetCorrectionUncertainty:: jet phi is not set" << std::endl;
 	    result.push_back(-999.0);
 	  } else {
 	    result.push_back(mJetPt);
@@ -142,7 +141,7 @@ std::vector<float> JetCorrectionUncertainty::fillVector(const std::vector<std::s
       else if (fNames[i] == "JetE")
         {
           if (!mIsJetEset) {
-	    edm::LogError("JetCorrectionUncertainty::")<<" jet energy is not set";
+            std::cout << "JetCorrectionUncertainty:: jet energy is not set" << std::endl;
 	    result.push_back(-999.0);
 	  } else {
 	    result.push_back(mJetE);
@@ -151,7 +150,7 @@ std::vector<float> JetCorrectionUncertainty::fillVector(const std::vector<std::s
       else if (fNames[i] == "JetEMF")
         {
           if (!mIsJetEMFset) {
-	    edm::LogError("JetCorrectionUncertainty::")<<" jet emf is not set";
+            std::cout << "JetCorrectionUncertainty:: jet emf is not set" << std::endl;
 	    result.push_back(-999.0);
 	  } else {
 	    result.push_back(mJetEMF);
@@ -160,7 +159,7 @@ std::vector<float> JetCorrectionUncertainty::fillVector(const std::vector<std::s
       else if (fNames[i] == "LepPx")
         {
           if (!mIsLepPxset){
-	    edm::LogError("JetCorrectionUncertainty::")<<" lepton px is not set";
+            std::cout << "JetCorrectionUncertainty:: lepton px is not set" << std::endl;
 	    result.push_back(-999.0);
 	  } else {
 	    result.push_back(mLepPx);
@@ -169,7 +168,7 @@ std::vector<float> JetCorrectionUncertainty::fillVector(const std::vector<std::s
       else if (fNames[i] == "LepPy")
         {
           if (!mIsLepPyset){
-	    edm::LogError("JetCorrectionUncertainty::")<<" lepton py is not set";
+            std::cout << "JetCorrectionUncertainty:: lepton py is not set" << std::endl;
 	    result.push_back(-999.0);
 	  } else {
 	    result.push_back(mLepPy);
@@ -178,7 +177,7 @@ std::vector<float> JetCorrectionUncertainty::fillVector(const std::vector<std::s
       else if (fNames[i] == "LepPz")
         {
           if (!mIsLepPzset){
-	    edm::LogError("JetCorrectionUncertainty::")<<" lepton pz is not set";
+            std::cout << "JetCorrectionUncertainty:: lepton pz is not set" << std::endl;
 	    result.push_back(-999.0);
 	  } else {
 	    result.push_back(mLepPz);
@@ -186,7 +185,7 @@ std::vector<float> JetCorrectionUncertainty::fillVector(const std::vector<std::s
         }
      
       else {
-	edm::LogError("JetCorrectionUncertainty::")<<" unknown parameter "<<fNames[i];
+        std::cout << "JetCorrectionUncertainty:: unknown parameter "<<fNames[i] << std::endl;
 	result.push_back(-999.0);
       }
     }     
@@ -221,7 +220,7 @@ float JetCorrectionUncertainty::getPtRel()
     // lep2 = pTrel2 + pLrel2
     pTrel2 = lep2-pLrel2;
   } else
-    edm::LogError("JetCorrectionUncertainty")<<" not positive lepton-jet momentum: "<<lj2;
+    std::cout << "JetCorrectionUncertainty not positive lepton-jet momentum: "<<lj2 << std::endl;
   return (pTrel2 > 0) ? std::sqrt(pTrel2) : 0.0;
 }
 //------------------------------------------------------------------------ 
diff --git a/ext/src/JetCorrectorParameters.cc b/ext/src/JetCorrectorParameters.cc
index cc54986..63c9fca 100644
--- a/ext/src/JetCorrectorParameters.cc
+++ b/ext/src/JetCorrectorParameters.cc
@@ -4,8 +4,8 @@
 //
 // Generic parameters for Jet corrections
 //
-#include "CondFormats/JetMETObjects/interface/JetCorrectorParameters.h"
-#include "CondFormats/JetMETObjects/interface/JetCorrectorParametersHelper.h"
+#include "JetCorrectorParameters.h"
+#include "JetCorrectorParametersHelper.h"
 #include <iostream>
 #include <iomanip>
 #include <fstream>
@@ -518,8 +518,10 @@ JetCorrectorParameters const & JetCorrectorParametersCollection::operator[]( key
   for ( ; i != iend; ++i ) {
     if ( k == i->first ) return i->second;
   }
-  throw cms::Exception("InvalidInput") << " cannot find key " << static_cast<int>(k)
-                                       << " in the JEC payload, this usually means you have to change the global tag" << std::endl;
+  std::stringstream exmsg;
+  exmsg << "InvalidInput: cannot find key " << static_cast<int>(k)
+        << " in the JEC payload, this usually means you have to change the global tag";
+  throw std::invalid_argument(exmsg.str());
 }
 
 // Get a list of valid keys. These will contain hashed keys
@@ -600,15 +602,8 @@ JetCorrectorParametersCollection::findKey( std::string const & label ) const {
   }
 
   // Didn't find default corrections, throw exception
-  throw cms::Exception("InvalidInput") << " Cannot find label " << label << std::endl;
+  std::stringstream exmsg;
+  exmsg << "InvalidInput: cannot find label " << label;
+  throw std::invalid_argument(exmsg.str());
 
 }
-
-
-//#include "FWCore/Framework/interface/EventSetup.h"
-//#include "FWCore/Framework/interface/ESHandle.h"
-//#include "FWCore/Framework/interface/ModuleFactory.h"
-#include "FWCore/Utilities/interface/typelookup.h"
-
-TYPELOOKUP_DATA_REG(JetCorrectorParameters);
-TYPELOOKUP_DATA_REG(JetCorrectorParametersCollection);
diff --git a/ext/src/JetCorrectorParametersHelper.cc b/ext/src/JetCorrectorParametersHelper.cc
index 671b095..114b861 100644
--- a/ext/src/JetCorrectorParametersHelper.cc
+++ b/ext/src/JetCorrectorParametersHelper.cc
@@ -4,7 +4,7 @@
 //
 // Helper class for JetCorrectorParameters
 //
-#include "CondFormats/JetMETObjects/interface/JetCorrectorParametersHelper.h"
+#include "JetCorrectorParametersHelper.h"
 #include <sstream>
 #include <cstdlib>
 #include <algorithm>
@@ -101,11 +101,13 @@ void JetCorrectorParametersHelper::checkMiddleBinUniformity(const std::vector<Je
     //Loop over the mRecords vector
     for (unsigned iRecord=0; iRecord<nRec; iRecord++) {
       if (mRecords[iRecord].xMin(idim)!=mBinBoundaries[idim][nBoundaryPassed%fN[idim-1]]) {
-        throw cms::Exception("MissingRecord") << "found a missing record in binned dimension " << idim << " after record " << iRecord << std::endl
-                                              << "\tthe bin lower bound should have been " << mBinBoundaries[idim][nBoundaryPassed%fN[idim-1]]
-                                              << ", but was instead " <<  mRecords[iRecord].xMin(idim) << std::endl
-                                              << "\tall binned dimensions, besides the last one, must have uniform binning." << std::endl
-                                              << mRecords[iRecord-1] << std::endl << mRecords[iRecord] << std::endl;
+        std::stringstream exmsg;
+        exmsg << "MissingRecord: found a missing record in binned dimension " << idim << " after record " << iRecord << std::endl
+              << "\tthe bin lower bound should have been " << mBinBoundaries[idim][nBoundaryPassed%fN[idim-1]]
+              << ", but was instead " <<  mRecords[iRecord].xMin(idim) << std::endl
+              << "\tall binned dimensions, besides the last one, must have uniform binning." << std::endl
+              << mRecords[iRecord-1] << std::endl << mRecords[iRecord];
+        throw std::runtime_error(exmsg.str());
       }
       else if((iRecord==nRec-1 || mRecords[iRecord].xMin(idim)!=mRecords[iRecord+1].xMin(idim))) {
         nBoundaryPassed++;
diff --git a/ext/src/JetResolution.cc b/ext/src/JetResolution.cc
index d2460ae..aada421 100644
--- a/ext/src/JetResolution.cc
+++ b/ext/src/JetResolution.cc
@@ -1,13 +1,4 @@
-#ifndef STANDALONE
-#include <JetMETCorrections/Modules/interface/JetResolution.h>
-#include <FWCore/Framework/interface/EventSetup.h>
-#include <FWCore/Framework/interface/ESHandle.h>
-
-#include <CondFormats/DataRecord/interface/JetResolutionRcd.h>
-#include <CondFormats/DataRecord/interface/JetResolutionScaleFactorRcd.h>
-#else
 #include "JetResolution.h"
-#endif
 
 namespace JME {
 
@@ -19,15 +10,6 @@ namespace JME {
         m_object = std::make_shared<JetResolutionObject>(object);
     }
 
-#ifndef STANDALONE
-    const JetResolution JetResolution::get(const edm::EventSetup& setup, const std::string& label) {
-        edm::ESHandle<JetResolutionObject> handle;
-        setup.get<JetResolutionRcd>().get(label, handle); 
-
-        return *handle;
-    }
-#endif
-
     float JetResolution::getResolution(const JetParameters& parameters) const {
         const JetResolutionObject::Record* record = m_object->getRecord(parameters);
         if (! record)
@@ -44,15 +26,6 @@ namespace JME {
         m_object = std::make_shared<JetResolutionObject>(object);
     }
 
-#ifndef STANDALONE
-    const JetResolutionScaleFactor JetResolutionScaleFactor::get(const edm::EventSetup& setup, const std::string& label) {
-        edm::ESHandle<JetResolutionObject> handle;
-        setup.get<JetResolutionScaleFactorRcd>().get(label, handle); 
-
-        return *handle;
-    }
-#endif
-
     float JetResolutionScaleFactor::getScaleFactor(const JetParameters& parameters, Variation variation/* = Variation::NOMINAL*/) const {
         const JetResolutionObject::Record* record = m_object->getRecord(parameters);
         if (! record)
@@ -63,9 +36,3 @@ namespace JME {
     }
 
 }
-
-#ifndef STANDALONE
-#include "FWCore/Utilities/interface/typelookup.h"
-TYPELOOKUP_DATA_REG(JME::JetResolution);
-TYPELOOKUP_DATA_REG(JME::JetResolutionScaleFactor);
-#endif
diff --git a/ext/src/JetResolutionObject.cc b/ext/src/JetResolutionObject.cc
index c0a82a6..fdb0288 100644
--- a/ext/src/JetResolutionObject.cc
+++ b/ext/src/JetResolutionObject.cc
@@ -1,25 +1,6 @@
-#ifndef STANDALONE
-#include <CondFormats/JetMETObjects/interface/JetResolutionObject.h>
-#include <CondFormats/JetMETObjects/interface/Utilities.h>
-#include <FWCore/Utilities/interface/EDMException.h>
-
-#else
 #include "JetResolutionObject.h"
 #include "Utilities.h"
 #include <exception>
-
-namespace edm {
-    namespace errors {
-        enum ErrorCode {
-            NotFound = 8026,
-            ConfigFileReadError = 7002,
-            UnimplementedFeature = 8011,
-            FileReadError = 8021
-        };
-    };
-};
-#endif
-
 #include <cmath>
 #include <iostream>
 #include <fstream>
@@ -38,17 +19,6 @@ namespace JME {
         return "";
     }
 
-    void throwException(uint32_t code, const std::string& message) {
-#ifndef STANDALONE
-        throw edm::Exception(static_cast<edm::errors::ErrorCodes>(code), message);
-#else
-        std::stringstream error;
-        error << message << " Error code: " << code;
-        throw std::runtime_error(error.str());
-
-#endif
-    }
-
     const bimap<Binning, std::string> JetParameters::binning_to_string = {
         {Binning::JetPt, "JetPt"}, {Binning::JetEta, "JetEta"},
         {Binning::JetAbsEta, "JetAbsEta"}, {Binning::JetE, "JetE"},
@@ -123,7 +93,7 @@ namespace JME {
         for (const auto& bin: binning) {
             const auto& it = m_values.find(bin);
             if (it == m_values.cend()) {
-                throwException(edm::errors::NotFound, "JER parametrisation depends on '" + 
+                throw std::runtime_error("NotFound: JER parametrisation depends on '" +
                         JetParameters::binning_to_string.left.at(bin) +
                         "' but no value for this parameter has been specified. Please call the appropriate 'set' function of the JME::JetParameters object");
             }
@@ -141,13 +111,13 @@ namespace JME {
 
         // We need at least 3 tokens
         if (tokens.size() < 3) {
-            throwException(edm::errors::ConfigFileReadError, "Definition line needs at least three tokens. Please check file format.");
+            throw std::runtime_error("ConfigFileReadError: Definition line needs at least three tokens. Please check file format.");
         }
 
         size_t n_bins = std::stoul(tokens[0]);
 
         if (tokens.size() < (n_bins + 2)) {
-            throwException(edm::errors::ConfigFileReadError, "Invalid file format. Please check.");
+            throw std::runtime_error("Invalid file format. Please check.");
         }
 
         for (size_t i = 0; i < n_bins; i++) {
@@ -157,7 +127,7 @@ namespace JME {
         size_t n_variables = std::stoul(tokens[n_bins + 1]);
 
         if (tokens.size() < (1 + n_bins + 1 + n_variables + 1)) {
-            throwException(edm::errors::ConfigFileReadError, "Invalid file format. Please check.");
+            throw std::runtime_error("ConfigFileReadError: Invalid file format. Please check.");
         }
 
         for (size_t i = 0; i < n_variables; i++) {
@@ -177,15 +147,11 @@ namespace JME {
 
     void JetResolutionObject::Definition::init() {
         if (!m_formula_str.empty())
-#ifndef STANDALONE
             m_formula = std::make_shared<reco::FormulaEvaluator>(m_formula_str);
-#else
-            m_formula = std::make_shared<TFormula>("jet_resolution_formula", m_formula_str.c_str());
-#endif
         for (const auto& bin: m_bins_name) {
             const auto& b = JetParameters::binning_to_string.right.find(bin);
             if (b == JetParameters::binning_to_string.right.cend()) {
-                throwException(edm::errors::UnimplementedFeature, "Bin name not supported: '" + bin + "'");
+                throw std::runtime_error("UnimplementedFeature: Bin name not supported: '" + bin + "'");
             }
             m_bins.push_back(b->second);
         }
@@ -193,7 +159,7 @@ namespace JME {
         for (const auto& v: m_variables_name) {
             const auto& var = JetParameters::binning_to_string.right.find(v);
             if (var == JetParameters::binning_to_string.right.cend()) {
-                throwException(edm::errors::UnimplementedFeature, "Variable name not supported: '" + v + "'");
+                throw std::runtime_error("UnimplementedFeature: Variable name not supported: '" + v + "'");
             }
             m_variables.push_back(var->second);
         }
@@ -204,7 +170,7 @@ namespace JME {
         std::vector<std::string> tokens = getTokens(line);
 
         if (tokens.size() < (def.nBins() * 2 + def.nVariables() * 2 + 1)) {
-            throwException(edm::errors::ConfigFileReadError, "Invalid record. Please check file format. Record: " + line);
+            throw std::runtime_error("ConfigFileReadError: Invalid record. Please check file format. Record: " + line);
         }
 
         size_t pos = 0;
@@ -218,7 +184,7 @@ namespace JME {
         size_t n_parameters = std::stoul(tokens[pos++]);
 
         if (tokens.size() < (def.nBins() * 2 + def.nVariables() * 2 + 1 + (n_parameters - def.nVariables()  * 2))) {
-            throwException(edm::errors::ConfigFileReadError, "Invalid record. Please check file format. Record: " + line);
+            throw std::runtime_error("ConfigFileReadError: Invalid record. Please check file format. Record: " + line);
         }
 
         for (size_t i = 0; i < def.nVariables(); i++) {
@@ -239,7 +205,7 @@ namespace JME {
         std::ifstream f(filename);
 
         if (! f.good()) {
-            throwException(edm::errors::FileReadError, "Can't read input file '" + filename + "'");
+            throw std::runtime_error("FileReadError: Can't read input file '" + filename + "'");
         }
 
         for (std::string line; std::getline(f, line); ) {
@@ -387,15 +353,7 @@ namespace JME {
         if (! m_valid)
             return 1;
 
-#ifndef STANDALONE
         const auto* formula = m_definition.getFormula();
-#else
-        // Set parameters
-        auto const* pFormula = m_definition.getFormula();
-        if (! pFormula)
-            return 1;
-        auto formula = *pFormula;
-#endif
         // Create vector of variables value. Throw if some values are missing
         std::vector<float> variables = variables_parameters.createVector(m_definition.getVariables());
 
@@ -405,24 +363,11 @@ namespace JME {
         }
         const std::vector<float>& parameters = record.getParametersValues();
 
-#ifndef STANDALONE
         //ArrayAdaptor only takes doubles
         std::vector<double> parametersD(parameters.begin(),parameters.end());
         return formula->evaluate(
             reco::formula::ArrayAdaptor(variables_,m_definition.nVariables()),
             reco::formula::ArrayAdaptor(parametersD.data(),parametersD.size())
         );
-#else
-        for (size_t index = 0; index < parameters.size(); index++) {
-            formula.SetParameter(index, parameters[index]);
-        }
-
-        return formula.EvalPar(variables_);
-#endif
     }
 }
-
-#ifndef STANDALONE
-#include "FWCore/Utilities/interface/typelookup.h"
-TYPELOOKUP_DATA_REG(JME::JetResolutionObject);
-#endif
diff --git a/ext/src/SimpleJetCorrectionUncertainty.cc b/ext/src/SimpleJetCorrectionUncertainty.cc
index 87db48e..128a9e2 100644
--- a/ext/src/SimpleJetCorrectionUncertainty.cc
+++ b/ext/src/SimpleJetCorrectionUncertainty.cc
@@ -1,6 +1,5 @@
-#include "CondFormats/JetMETObjects/interface/SimpleJetCorrectionUncertainty.h"
-#include "CondFormats/JetMETObjects/interface/JetCorrectorParameters.h"
-#include "FWCore/MessageLogger/interface/MessageLogger.h"
+#include "SimpleJetCorrectionUncertainty.h"
+#include "JetCorrectorParameters.h"
 #include <vector>
 #include <string>
 
@@ -30,7 +29,7 @@ float SimpleJetCorrectionUncertainty::uncertainty(const std::vector<float>& fX,
   float result = 1.;
   int bin = mParameters->binIndex(fX);
   if (bin<0) {
-    edm::LogError("SimpleJetCorrectionUncertainty")<<" bin variables out of range";
+    std::cout << "SimpleJetCorrectionUncertainty: bin variables out of range";
     result = -999.0;
   } else 
     result = uncertaintyBin((unsigned)bin,fY,fDirection);
@@ -40,12 +39,15 @@ float SimpleJetCorrectionUncertainty::uncertainty(const std::vector<float>& fX,
 float SimpleJetCorrectionUncertainty::uncertaintyBin(unsigned fBin, float fY, bool fDirection) const 
 {
   if (fBin >= mParameters->size()) { 
-    edm::LogError("SimpleJetCorrectionUncertainty")<<" wrong bin: "<<fBin<<": only "<<mParameters->size()<<" are available";
+    std::cout << "SimpleJetCorrectionUncertainty: wrong bin: "<<fBin<<": only "<<mParameters->size()<<" are available";
     return -999.0;
   }
   const std::vector<float>& p = mParameters->record(fBin).parameters();
-  if ((p.size() % 3) != 0)
-    throw cms::Exception ("SimpleJetCorrectionUncertainty")<<"wrong # of parameters: multiple of 3 expected, "<<p.size()<< " got";
+  if ((p.size() % 3) != 0) {
+    std::stringstream exmsg;
+    exmsg << "SimpleJetCorrectionUncertainty: wrong # of parameters: multiple of 3 expected, "<<p.size()<< " got";
+    throw std::runtime_error(exmsg.str());
+  }
   std::vector<float> yGrid,value;
   unsigned int N = p.size()/3;
   float result = -1.0;
@@ -86,7 +88,7 @@ float SimpleJetCorrectionUncertainty::linearInterpolation(float fZ, const float
       if (fY[0] == fY[1])
         r = fY[0];
       else {
-	edm::LogError("SimpleJetCorrectionUncertainty")<<" interpolation error";
+        std::cout << "SimpleJetCorrectionUncertainty: interpolation error";
 	return -999.0;
       }
     } 
diff --git a/ext/src/SimpleJetCorrector.cc b/ext/src/SimpleJetCorrector.cc
index ff30c18..84c9f59 100644
--- a/ext/src/SimpleJetCorrector.cc
+++ b/ext/src/SimpleJetCorrector.cc
@@ -1,9 +1,10 @@
-#include "CondFormats/JetMETObjects/interface/SimpleJetCorrector.h"
-#include "CondFormats/JetMETObjects/interface/JetCorrectorParameters.h"
-#include "CondFormats/JetMETObjects/interface/Utilities.h"
+#include "SimpleJetCorrector.h"
+#include "JetCorrectorParameters.h"
+#include "Utilities.h"
 #include <iostream>
 #include <sstream>
 #include <cmath>
+#include <cstring>
 
 //------------------------------------------------------------------------
 //--- SimpleJetCorrector constructor -------------------------------------
diff --git a/ext/src/formulaEvaluatorBase.cc b/ext/src/formulaEvaluatorBase.cc
index 38ed437..d695274 100644
--- a/ext/src/formulaEvaluatorBase.cc
+++ b/ext/src/formulaEvaluatorBase.cc
@@ -14,7 +14,7 @@
 #include <algorithm>
 
 // user include files
-#include "CommonTools/Utils/src/formulaEvaluatorBase.h"
+#include "formulaEvaluatorBase.h"
 
 
 //
